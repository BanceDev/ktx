name: build and deploy snapshots
on: [push]
jobs:
  build:
    if: github.repository == 'QW-Group/ktx'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
       target: [linux-amd64, linux-i686, linux-armhf, linux-aarch64, windows-x64, windows-x86]
       include:
         - target: linux-amd64
           os: linux
           arch: amd64
           ext: ".so"
         - target: linux-i686
           os: linux
           arch: i686
           ext: ".so"
         - target: linux-armhf
           os: linux
           arch: armhf
           ext: ".so"
         - target: linux-aarch64
           os: linux
           arch: aarch64
           ext: ".so"
         - target: windows-x64
           os: windows
           arch: x64
           ext: ".dll"
         - target: windows-x86
           os: windows
           arch: x86
           ext: ".dll"
    container:
      image: debian:stable
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Prepare Build Environemnt
        run: |
             apt-get update
             apt-get -y install build-essential cmake gcc-i686-linux-gnu openssh-client
             apt-get -y install gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross
             apt-get -y install gcc-mingw-w64-x86-64 gcc-mingw-w64-i686
      - name: Build
        run: |
             ./build_cmake.sh ${{ matrix.target }}
      - name: Create checksum
        run: |
             md5sum build/${{ matrix.target }}/qwprogs${{ matrix.ext }} > build/${{ matrix.target }}/qwprogs.md5
      - name: Setup SSH
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        shell: bash
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
      - name: Set date
        run: |
          echo "DATE=$(TZ="Europe/Amsterdam" date "+%Y%m%d-%H%M%S")" >> $GITHUB_ENV
      - name: Deploy
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        shell: bash
        run: |
             mkdir -p upload/snapshots/${{ matrix.os }}/${{ matrix.arch }}
             mkdir -p upload/snapshots/latest/${{ matrix.os }}/${{ matrix.arch }}
             cp build/${{ matrix.target }}/qwprogs${{ matrix.ext }} upload/snapshots/${{ matrix.os }}/${{ matrix.arch }}/${{ env.DATE }}_${GITHUB_SHA::7}_qwprogs${{ matrix.ext }}
             cp build/${{ matrix.target }}/qwprogs.md5 upload/snapshots/${{ matrix.os }}/${{ matrix.arch }}/${{ env.DATE }}_${GITHUB_SHA::7}_qwprogs.md5
             cp build/${{ matrix.target }}/qwprogs${{ matrix.ext }} upload/snapshots/latest/${{ matrix.os }}/${{ matrix.arch }}/qwprogs${{ matrix.ext }}
             cp build/${{ matrix.target }}/qwprogs.md5 upload/snapshots/latest/${{ matrix.os }}/${{ matrix.arch }}/qwprogs.md5
             sftp -rp -o 'StrictHostKeyChecking no' -o 'UserKnownHostsFile /dev/null' -P ${{ secrets.SFTP_PORT }} ${{ secrets.SFTP_USERNAME }}@${{ secrets.SFTP_HOST }}:/snapshots <<< $'put -rp upload/snapshots/*'
  build-qvm:
    runs-on: ubuntu-latest
    steps:
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores
      - name: Checkout ktx
        uses: actions/checkout@v4
        with:
          path: ktx
      - name: Checkout q3lcc
        uses: actions/checkout@v4
        with:
          repository: ec-/q3lcc
          path: q3lcc
      - name: Build q3lcc
        run: |
          make -j ${{ steps.cpu-cores.outputs.count }} PLATFORM=$(uname -s) ARCH=$(uname -m) &> /dev/null
          mv build*/q3lcc build*/q3rcc build*/q3cpp /usr/local/bin
        working-directory: q3lcc
      - name: Checkout q3asm
        uses: actions/checkout@v4
        with:
          repository: ec-/q3asm
          path: q3asm
      - name: Build q3asm
        run: |
          make -j ${{ steps.cpu-cores.outputs.count }} PLATFORM=$(uname -s) ARCH=$(uname -m) &> /dev/null
          mv q3asm /usr/local/bin
        working-directory: q3asm
      - name: Configure qvm
        run: cmake -B cmake-build-release -DCMAKE_BUILD_TYPE=Release
        working-directory: ktx
      - name: Build qvm
        run: |
          cmake --build cmake-build-release --config Release --target qvm --parallel
          mv cmake-build-release/qwprogs.{qvm,map} ..
        working-directory: ktx
      - uses: actions/upload-artifact@v4
        with:
          name: qwprogs-qvm
          path: |
            qwprogs.qvm
            qwprogs.map
          compression-level: 9
